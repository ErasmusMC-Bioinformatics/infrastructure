---
# Python 3 support
pip_virtualenv_command: /usr/bin/python3 -m virtualenv # usegalaxy_eu.certbot, usegalaxy_eu.tiaas2, galaxyproject.galaxy
certbot_virtualenv_package_name: python3-virtualenv    # usegalaxy_eu.certbot
pip_package: python3-pip                               # geerlingguy.pip

# PostgreSQL
postgresql_objects_users:
  - name: galaxy
  - name: telegraf
  - name: tiaas
postgresql_objects_databases:
  - name: galaxy
    owner: galaxy
postgresql_objects_privileges:
  - database: galaxy
    roles: telegraf
    privs: SELECT
    objs: ALL_IN_SCHEMA
  - database: galaxy
    roles: tiaas
    objs: galaxy_user,galaxy_session,job,history,workflow,workflow_invocation
    type: table
    privs: SELECT
  - database: galaxy
    roles: tiaas
    objs: user_group_association,galaxy_group,role,group_role_association
    type: table
    privs: SELECT,INSERT
  - database: galaxy
    roles: tiaas
    objs: group_role_association
    type: table
    privs: DELETE
  - database: galaxy
    roles: tiaas
    objs: role_id_seq,galaxy_group_id_seq,group_role_association_id_seq,user_group_association_id_seq
    type: sequence
    privs: USAGE,SELECT

# PostgreSQL Backups
postgresql_backup_dir: /data/backups
postgresql_backup_local_dir: "{{ '~postgres' | expanduser }}/backups"

# Galaxy
galaxy_create_user: true
galaxy_separate_privileges: true
galaxy_manage_paths: true
galaxy_layout: root-dir
galaxy_root: /srv/galaxy
galaxy_user: {name: galaxy, shell: /bin/bash}
galaxy_commit_id: release_21.09
galaxy_config_style: yaml
galaxy_force_checkout: true

# This should've been fixed in latest galaxy role??
galaxy_tool_dependency_dir: "{{ galaxy_mutable_data_dir }}/dependencies"
# miniconda
miniconda_prefix: "{{ galaxy_tool_dependency_dir }}/_conda"
miniconda_version: "4.6.14"
miniconda_manage_dependencies: false


galaxy_config:
  galaxy:
    brand: "ðŸ§¬ðŸ”¬ðŸš€"
    admin_users: admin@example.org
    database_connection: "postgresql:///galaxy?host=/var/run/postgresql"
    file_path: /data/galaxy
    check_migrate_tools: false
    tool_data_path: "{{ galaxy_mutable_data_dir }}/tool-data"
    data_dir: "{{ galaxy_mutable_data_dir }}" # I think this is fixed in more recent role versions.
    job_config_file: "{{ galaxy_config_dir }}/job_conf.xml"
    id_secret: "{{ vault_id_secret }}"
    tool_data_table_config_path: /cvmfs/data.galaxyproject.org/byhand/location/tool_data_table_conf.xml,/cvmfs/data.galaxyproject.org/managed/location/tool_data_table_conf.xml
    object_store_store_by: uuid
    trs_servers_config_file: "{{ galaxy_config_dir }}/trs_servers_conf.yml"
    aws_estimate: true
    job_working_directory: /data/galaxy/jobs
    allow_path_paste: true
    database_engine_option_server_side_cursors: true
    slow_query_log_threshold: 5
    enable_per_request_sql_debugging: true
    watch_tools: 'auto'
    watch_job_rules: 'auto'
    nginx_x_accel_redirect_base: /_x_accel_redirect
    sanitize_all_html: false
    serve_xss_vulnerable_mimetypes: true
    library_import_dir: /data/library
    show_welcome_with_login: true
    expose_user_name: true
    enable_quotas: true
    conda_exec: '{{ miniconda_prefix }}/bin/mamba'
    expose_dataset_path: true
    expose_potentially_sensitive_job_metrics: true
    outputs_to_working_directory: true
    cleanup_job: onerror
    allow_user_deletion: true
    allow_user_impersonation: true
    user_preferences_extra_conf_path: "{{ galaxy_config_dir }}/user_preferences.yml"
    # oidc
    enable_oidc: true
    oidc_config_file: "{{ galaxy_config_dir }}/oidc_config.xml"
    oidc_backends_config_file: "{{ galaxy_config_dir }}/oidc_backends_config.xml"
    file_sources_config_file: "{{ galaxy_config_dir }}/file_sources.yml"
    # FTP
    ftp_upload_dir: /data/uploads
    ftp_upload_site: "{{ inventory_hostname }}"
  uwsgi:
    socket: 127.0.0.1:8080
    buffer-size: 16384
    processes: 1
    threads: 4
    offload-threads: 2
    static-map:
      - /static={{ galaxy_server_dir }}/static
      - /favicon.ico={{ galaxy_server_dir }}/static/favicon.ico
    static-safe: client/galaxy/images
    master: true
    virtualenv: "{{ galaxy_venv_dir }}"
    pythonpath: "{{ galaxy_server_dir }}/lib"
    module: galaxy.webapps.galaxy.buildapp:uwsgi_app()
    thunder-lock: true
    die-on-term: true
    hook-master-start:
      - unix_signal:2 gracefully_kill_them_all
      - unix_signal:15 gracefully_kill_them_all
    py-call-osafterfork: true
    enable-threads: true
    mule:
      - lib/galaxy/main.py
      - lib/galaxy/main.py
    farm: job-handlers:1,2

galaxy_config_templates:
  - src: templates/galaxy/config/job_conf.xml.j2
    dest: "{{ galaxy_config.galaxy.job_config_file }}"
  - src: templates/galaxy/config/user_preferences_extra_conf.yml
    dest: "{{ galaxy_config.galaxy.user_preferences_extra_conf_path }}"
  - src: templates/galaxy/config/oidc_backends_config.xml
    dest: "{{ galaxy_config.galaxy.oidc_backends_config_file }}"
  - src: templates/galaxy/config/oidc_config.xml
    dest: "{{ galaxy_config.galaxy.oidc_config_file }}"
  - src: "templates/galaxy/config/file_sources.yml"
    dest: "{{ galaxy_config.galaxy.file_sources_config_file }}"
  - src: "templates/galaxy/config/trs_servers_conf.yml"
    dest: "{{ galaxy_config.galaxy.trs_servers_config_file }}"
  - src: "templates/galaxy/config/custom_tools.xml"
    dest: "{{ galaxy_config_dir }}/emc-tool-conf.xml"

# Tools
galaxy_tool_config_files:
- "{{ galaxy_config_dir }}/emc-tool-conf.xml"

# systemd
galaxy_systemd_mode: mule
galaxy_zergpool_listen_addr: 127.0.0.1:8080
galaxy_restart_handler_name: "Restart Galaxy"

# Certbot
certbot_auto_renew_hour: "{{ 23 |random(seed=inventory_hostname)  }}"
certbot_auto_renew_minute: "{{ 59 |random(seed=inventory_hostname)  }}"
certbot_auth_method: --webroot
certbot_install_method: virtualenv
certbot_auto_renew: yes
certbot_auto_renew_user: root
certbot_environment: staging
certbot_well_known_root: /srv/nginx/_well-known_root
certbot_share_key_users:
  - nginx
certbot_post_renewal: |
    systemctl restart nginx || true
certbot_domains:
 - "{{ inventory_hostname }}"
certbot_agree_tos: --agree-tos

# NGINX
nginx_selinux_allow_local_connections: true
nginx_servers:
  - galaxy

nginx_enable_default_server: false
nginx_conf_http:
  client_max_body_size: 1g

# HTCondor
condor_host: "bioinf-galactus"
condor_allow_write: "bioinf-galactus,bioinf-galaxian,*"
condor_roles:
    - execute
    - central-manager
    - submit
condor_allow_negotiator: '$(ALLOW_WRITE)'
condor_allow_administrator: "$(ALLOW_WRITE)"
condor_network_interface: "{{ ansible_default_ipv4.interface }}"
condor_fs_domain: emc-bioinf
condor_uid_domain: emc-bioinf
condor_trust_uid_domain: 'True'
condor_extra: |
    CLAIM_PARTITIONABLE_LEFTOVERS = True
    NUM_SLOTS = 1
    NUM_SLOTS_TYPE_1 = 1
    SLOT_TYPE_1 = cpus=90%,ram=90%
    SLOT_TYPE_1_PARTITIONABLE = True
    ALLOW_PSLOT_PREEMPTION = False
    STARTD.PROPORTIONAL_SWAP_ASSIGNMENT = True
    COLLECTOR_NAME = "EMC Cluster"
    CGROUP_MEMORY_LIMIT_POLICY = soft

# Proftpd:
proftpd_galaxy_auth: yes
galaxy_ftp_upload_dir: "{{ galaxy_config.galaxy.ftp_upload_dir }}"
proftpd_display_connect: |
  EMC FTP server

  Unauthorized access is prohibited
proftpd_create_ftp_upload_dir: yes
proftpd_options:
  - User: galaxy
  - Group: galaxy
  - Port: 21
proftpd_sql_db: galaxy@/var/run/postgresql
proftpd_sql_user: galaxy
proftpd_global_options:
  - PassivePorts: 56000 60000
